version: 2.1

executors:
  fedora:
    docker:
     - image: fedora:latest
       auth:
         username: $DOCKER_USERNAME
         password: $DOCKER_PASSWORD

commands:

  install-common-deps:
    steps:
      - run:
          name: Install common dependencies
          command: |
            dnf update -y > /dev/null
            dnf install -y \
              desktop-file-utils \
              git \
              gcc \
              glib2-devel \
              gobject-introspection-devel \
              libappstream-glib \
              libdrm-devel \
              libgee \
              libgee-devel \
              make \
              nodejs \
              npm \
              'pkgconfig(gstreamer-1.0)' \
              'pkgconfig(gtk+-3.0)' \
              'pkgconfig(javascriptcoregtk-4.0)' \
              'pkgconfig(json-glib-1.0)' \
              'pkgconfig(libarchive)' \
              'pkgconfig(libnotify)' \
              'pkgconfig(libpulse)' \
              'pkgconfig(libsecret-1)' \
              'pkgconfig(libsoup-2.4)' \
              'pkgconfig(python3)' \
              'pkgconfig(sqlite3)' \
              'pkgconfig(uuid)' \
              'pkgconfig(x11)' \
              'pkgconfig(xext)' \
              'pkgconfig(xextproto)' \
              patch \
              python3-pyparsing \
              sqlite-devel \
              vala \
              vala-devel \
              valadoc \
              xorg-x11-util-macros
            git clone https://github.com/robclark/libdri2.git
            cd libdri2
            ./autogen.sh --prefix=/usr
            make all
            make install
            /sbin/ldconfig
            cd ..
            rm -rf libdri2
            npm install standard --global
            standard --version

  build-vala:
    parameters:
      branch:
        type: string
        default: "master"
    steps:
      - run:
          name: Install Vala dependencies
          command: |
            dnf install -y \
              autoconf \
              autoconf-archive \
              automake \
              bison \
              flex \
              gcc \
              graphviz-devel \
              make
            gcc --version
            valac --version
      - run:
          name: Build Vala from git
          working_directory: ~/workdir
          command: |
            git clone https://gitlab.gnome.org/GNOME/vala.git -b << parameters.branch >> --depth 500
            cd vala
            ./autogen.sh --prefix=/usr
            patch -p1 < ~/workdir/nuvolaruntime/.circleci/vala-ignore-deprecated-symbols.patch
            make all
            dnf remove -y --noautoremove vala vala-devel valadoc
            make install
  build-gee:
    steps:
      - run:
          name: Build Gee from git
          working_directory: ~/workdir
          command: |
            git clone https://gitlab.gnome.org/GNOME/libgee.git --depth=500
            cd libgee
            ./autogen.sh --prefix=/usr --enable-introspection=no --disable-static --enable-gtk-doc=no
            make all
            dnf remove -y --noautoremove libgee libgee-devel
            make install

  build-valalint:
    parameters:
      branch:
        type: string
        default: "master"
    steps:
      - run:
          name: Build Valalint from git
          working_directory: ~/workdir
          command: |
            git clone https://github.com/tiliado/valalint.git -b << parameters.branch >>
            cd valalint
            make all
            make install

  build-diorite:
    steps:
      - run:
          name: Checkout Diorite
          command: |
            if [ -z "$(git ls-remote --heads https://github.com/tiliado/diorite.git "$CIRCLE_BRANCH")" ]; then
              DIORITE_BRANCH="master"
            else
              DIORITE_BRANCH="$CIRCLE_BRANCH"
            fi
            echo "Cloning Diorite branch $DIORITE_BRANCH:"
            git clone https://github.com/tiliado/diorite.git -b "$DIORITE_BRANCH"
      - run:
          name: Build and run tests of Diorite
          working_directory: ~/workdir/diorite
          command: |
            ./waf configure build install --prefix=/usr
            /sbin/ldconfig
            LD_LIBRARY_PATH=./build ./build/run-dioritetests

  checkout-nuvola:
    steps:
      - checkout:
          path: ~/workdir/nuvolaruntime

  build-nuvola:
    steps:
      - run:
          name: Build and run Nuvola
          working_directory: ~/workdir/nuvolaruntime
          command: |
            ./waf configure build install \
              --no-unity --no-appindicator --dummy-engine --no-strict
            LD_LIBRARY_PATH=./build ./build/run-nuvolaruntime-tests

  build-nuvola-strict:
    steps:
      - run:
          name: Build and run Nuvola
          working_directory: ~/workdir/nuvolaruntime
          command: |
            ./waf configure build install \
              --no-unity --no-appindicator --dummy-engine
            LD_LIBRARY_PATH=./build ./build/run-nuvolaruntime-tests
jobs:

  build-vala-fedora:
    executor: fedora
    working_directory: ~/workdir
    steps:
      - checkout-nuvola
      - install-common-deps
      - build-valalint:
          branch: "0.48.x"
      - build-diorite
      - build-nuvola

  build-vala-git-stable:
    executor: fedora
    working_directory: ~/workdir
    steps:
      - checkout-nuvola
      - install-common-deps
      - build-vala:
          branch: "0.52"
      - build-valalint:
          branch: "0.52.x"
      - build-diorite
      - build-nuvola-strict

  build-vala-git-master:
    executor: fedora
    working_directory: ~/workdir
    steps:
      - checkout-nuvola
      - install-common-deps
      - build-vala
      - build-gee
      - build-valalint
      - build-diorite
      - build-nuvola-strict

x-jobs: &jobs
  jobs:
    # Build with Vala as included in Fedora.
    - build-vala-fedora:
        context: docker-hub-tiliado
    # Build with latest stable Vala from git.
    - build-vala-git-stable:
        context: docker-hub-tiliado
    # Build with development Vala from git master.
    - build-vala-git-master:
        context: docker-hub-tiliado

workflows:
  version: 2
  build:
    <<: *jobs
  nightly:
    <<: *jobs
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
                - release-4.x

